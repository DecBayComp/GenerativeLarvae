import numpy import matplotlibmatplotlib.use('Agg')import matplotlib.pyplot as pltimport os.pathfrom scipy.optimize import curve_fitimport function from variable import active_timefrom variable import activation_timefrom variable import end_timedef proba_ini(TAB) :    probabehavior=[]    TITI=TAB[((TAB[:,0]>activation_time-15)&(TAB[:,0]<activation_time-5))]    [probabehavior.append((list(TITI[:,1]).count(float(i)))/len(TITI[:,1])) for i in range(0,6)]    return probabehavior def parameters_base(TAB) :     histotemps=[[],[],[],[],[],[]]    OMEGAbase=numpy.zeros((6))    transbase=numpy.zeros((6,6))    TABB=TAB[~(TAB[:,0]>activation_time)]# Transition,Tau    for i in range(0,6):        TABJ=TABB[~(TABB[:,1]!=i)]        for j in range(0,len(TABJ)):            if TABJ[j,2]!=TABJ[j-1,2]:                histotemps[i].append(TABJ[j-1,2])    for i in range(0,6) :        weights = numpy.ones_like(histotemps[i])/(float(len(histotemps[i]))*0.2)        m, bins, patches=plt.hist(histotemps[i], bins=100, weights=weights,histtype='step', range=[0,20],linewidth=2.0)        popt, pcov=curve_fit(function.exp, numpy.linspace(0,20,100), m)        OMEGAbase[i]=popt    #if sum(histotemps[i])!=0:        #OMEGA[0,i]=len(histotemps[i])/sum(histotemps[i])       larva=list(set(list(TABB[:,3])))    for r in larva :        TABN=TABB[TABB[:,3]==r]        for j in range(1,len(TABN)):            if TABN[j,1]!=TABN[j-1,1]:                transbase[int(TABN[j-1,1]),int(TABN[j,1])]+=1    for j in range(0,6):        if sum(transbase[j])!=0 :            transbase[j]=transbase[j]/(sum(transbase[j]))                  return  transbase, OMEGAbase     def parameters_active(TAB) :    trans=[]    STOP=[]    [STOP.append([]) for i in range(0,active_time)]    for j in range(0,active_time):        [STOP[j].append([]) for i in range(0,6)]    [trans.append([]) for i in range(0,active_time)]    for j in range(0,active_time):        [trans[j].append([]) for i in range(0,6)]        [trans[j][i].extend([0,0,0,0,0,0]) for i in range(0,6)]       OMEGA=numpy.zeros((active_time+1,6))    TABA=TAB[~(TAB[:,0]<activation_time)]          deb=[[],[],[],[],[],[]]    for j in range(1,active_time):         #print(OMEGA[j-1,:],deb)            deb=[[],[],[],[],[],[]]        TABSMALL=TABA[(TABA[:,0]>j+activation_time-2)&(TABA[:,0]<j+activation_time+3)]        deb[int(TABSMALL[0,1])].append(TABSMALL[0,0])        for i in range(0,len(TABSMALL)-4):            if int(TABSMALL[i,1]) not in [0,1]:                if (TABSMALL[i,2]!=TABSMALL[i-1,2])and(TABSMALL[i,3]!=TABSMALL[i-1,3]):                    deb[int(TABSMALL[i,1])].append(TABSMALL[i,0])                if (TABSMALL[i,1]!=TABSMALL[i-1,1])and(TABSMALL[i,3]==TABSMALL[i-1,3]):                    deb[int(TABSMALL[i,1])].append(TABSMALL[i,0])            if int(TABSMALL[i,1]) not in [0,1]:                        if((TABSMALL[i+1,1]!=TABSMALL[i,1])and(TABSMALL[i,3]==TABSMALL[i+1,3])):                    STOP[j][int(TABSMALL[i,1])].append(TABSMALL[i,0]-deb[int(TABSMALL[i,1])][-1])        deb=[[],[],[],[],[],[]]                                TABTEMPS=TABA[(TABA[:,0]>j+activation_time-1)&(TABA[:,0]<j+activation_time)]        deb[int(TABTEMPS[0,1])].append(TABTEMPS[0,0])        for i in range(0,len(TABTEMPS)-2):                        if int(TABTEMPS[i,1]) in [0,1] :                if (TABTEMPS[i,3]!=TABTEMPS[i-1,3]):                    deb[int(TABTEMPS[i,1])].append(TABTEMPS[i,0])                if (TABTEMPS[i,1]!=TABTEMPS[i-1,1])and(TABTEMPS[i,3]==TABTEMPS[i-1,3]):                    deb[int(TABTEMPS[i,1])].append(TABTEMPS[i,0])            if int(TABTEMPS[i,1]) in [0,1] :                if((TABTEMPS[i+1,1]!=TABTEMPS[i,1])and(TABTEMPS[i,3]==TABTEMPS[i+1,3])):                     STOP[j][int(TABTEMPS[i,1])].append(TABTEMPS[i,0]-deb[int(TABTEMPS[i,1])][-1])                 if((TABTEMPS[i,3]!=TABTEMPS[i+1,3])):                    STOP[j][int(TABTEMPS[i,1])].append(10)                                                                 larva=list(set(list(TABTEMPS[:,3])))        for r in larva :            TABN=TABTEMPS[TABTEMPS[:,3]==r]            for k in range(1,len(TABN)):                if TABN[k,1]!=TABN[k-1,1]:                    trans[j][int(TABN[k-1,1])][int(TABN[k,1])]+=1                        for j in range(1,active_time):           for i in range(2,6):                 nb=sum([1 for x in STOP[j][i] if x < 4])                nb2=sum([x for x in STOP[j][i] if x < 4])                if nb!=0:                    OMEGA[j,i]=nb/(nb2+(len(STOP[j][i])-nb)*4)                else :                    for k in range(1,16):                        OMEGA[j,i]+=0.5*(OMEGA[k-1,i]-OMEGA[k,i])**2/(15)        for i in range(0,2):                nb=sum([1 for x in STOP[j][i] if x < 1])                nb2=sum([x for x in STOP[j][i] if x < 1])                OMEGA[j,i]=nb/(nb2+(len(STOP[j][i])-nb))        for i in range(0,6):            if sum(trans[j][i])!=0 :                SUM=(sum(trans[j][i]))                 for k in range(0,6):                    trans[j][i][k]=trans[j][i][k]/SUM             else :                for k in range(1,16):                    for  o in range(0,6):                        trans[j][i][o]+=0.5*(trans[k-1][i][o]-trans[k][i][o])**2/(15)                SUM=[]                [SUM.append(sum(trans[j][i])) for k in range(0,6)]                if SUM[0]!=0 :                    trans[j][i]=list(trans[j][i]/numpy.asarray(SUM))    return OMEGA, trans